<?php/*tartalmazza:Universal  osztalyt ami meghívható $param függvénnyel(string vagy tömb) BaseHtml osztályt ami az alap html nézetet állítja elő az univerzál gyermekeAuto  ostály az Universal kiterjesztése automatikusan elindítja a result függvényt vagy amit a futtat paraméterben megadunkOBJ osztaly objektum generaló*//** * Ős objektum * létrehozásokor a construktornak átadott $param ból aktualizálja $this mezőket. * A $param megadása nem kötelező. * Lehet tömb és string is. "parm1=asd,parm2=rtz" * a $paramben megadható jog is ami hanem szerepel * a GOB::$userjog tömbben a $result-ba hibajelet ír * és GOB::$hiba[$this->alias][] tömbbe is */class Universal{    /**     * a GOB::$userjog tömbben ellenőrzi hogy megvan -e     */    public $jog;    /**     * olyan paraméterek tárolásására amalyeknek nem     * akarunk külön this változót létrehozni, vagy újabb App objektumot     * akarunk vele generálni */    public $param;    /**     *az objektum által léztrehozott eredmény     */    public $result = 'this result';    function __construct($param = '')    {        $this->general($param);    }    public function jog()    {        if ( GOB::get_userjog($this->jog)) {                return false;        }        return true;    }    public function this_refresh($param = array())    {        foreach ($param as $key => $value) {            $this->$key = $value;        }    }    public function update($param = '')    {        if ($param != '') {            if (!is_array($param)) {                $param = STR::to_tomb($param);            }            $this->this_refresh($param);        }    }    public function general($param = '')    {        $this->update($param);        if (!$this->jog()) {            $this->result = 'jogosultság hiba';            GOB::$hiba[$this->alias][] = 'jogosultság probléma';        }    }}/** * olyan Universal * ami először a GOB::$param['alias'] tömbbel kezdi * feltölteni a paramétereit  majd a param tömbbel foltatja  vagy felülírja */class GobUniversal extends Universal{    /**     * a GOB::$param[$alias] tömbben keresi a paramétereit     * ha több objektum példány van,     * az aliassal azonosítja magát     */    public $alias;    public function update($param = '')    {        if ($param != '') {            if (!is_array($param)) {                $param = STR::to_tomb($param);            }            if (empty($param['alias'])) {                $this->alias = get_class($this);            } else {                $this->alias = $param['alias'];            }        }        if (is_array(GOB::$param[$this->alias])) {            $this->this_refress(GOB::$param[$this->alias]);        }        if ($param != '') {            if (!is_array($param)) {                $param = STR::to_tomb($param);            }            $this->this_refresh($param);        }    }}/** * Ős objektum automatikusan lefutó függvénnel * Ha a jogosultság mgfelelő * alapból a result() de a $futtat mezőben meg lehet adni */class Auto extends Universal{    public $futtat = 'result'; // ez a függvény hívódik meg a generál fügvényből és a konstruktorból is    public function general($param = '')    {        $this->update($param);        if ($this->jog()) {            $futtat = $this->futtat;            $this->$futtat();        } else {            $this->result = 'jogosultság hiba';            GOB::$hiba[$this->alias][] = 'jogosultság probléma';        }    }    public function result()    {        //echo $this->result;    }}/** * Ős objektum automatikusan lefutó függvénnel * Ha a jogosultság mgfelelő * alapból a result() de a $futtat mezőben meg lehet adni */class GobAuto extends GobUniversal{    public $futtat = 'result'; // ez a függvény hívódik meg a generál fügvényből és a konstruktorból is    public function general($param = '')    {        $this->update($param);        if ($this->jog()) {            $futtat = $this->futtat;            $this->$futtat();        } else {            $this->result = 'jogosultság hiba';            GOB::$hiba[$this->alias][] = 'jogosultság probléma';        }    }    public function result()    {        //echo $this->result;    }}class OBJ{    static function make($osztaly_nev, $param = '')    {        //$$osztaly=new $osztaly_nev;        $osztaly = new $osztaly_nev($param);        return $osztaly;    }    static function result($osztaly_nev, $param = '')    {        $oszt = self::Obj($osztaly_nev, $param);        $result = $oszt->result();        return $result;    }}/* class Universal{public $alias;public $jog;public $param;public $result='this result';function __construct($param=''){    $this->general($param);}public function this_refress($param=array()){    foreach ($param as $key => $value) {        $this->$key =$value;    }}public function jog(){    if(!empty(GOB::$param[$this->alias]['jog']))    { //echo 'teszt';        if(!in_array(GOB::$param[$this->alias]['jog'],GOB::$userjog))        {            return false;        }    }    return true;}public function update($param=''){    if($param!='')    {        if(!is_array($param)){$param=STR::to_tomb($param);}        $this->alias=$param['alias'];        if(empty($this->alias)){$this->alias=get_class($this);}        foreach($param as $key=>$value){            GOB::$param[$this->alias][$key]=$value;        }    }    if(is_array( GOB::$param[$this->alias]))    {        $this->this_refress(GOB::$param[$this->alias]);    }}public function general($param=''){    $this->update($param);    if(!$this->jog())    {        $this->result='jogosultság hiba';        GOB::$hiba[$this->alias][]='jogosultság probléma';    }}}class App{//--    public  $appdir = 'app';    public $path ='';    public $appname ='';    function __construct($app_name,$Param=array()){        $this->path = $this->appdir.'/'.strtolower($app_name).'/'.strtolower($app_name).'.php';        $this->appname=$app_name;    }    function view($Param=array())    {       $app_name= $this->appname;       $this->path = $this->appdir.'/'.strtolower($app_name).'/'.strtolower($app_name).'.php';        include_once $this->path;        $view = $app_name::view($Param);        return $view;    }}class App_S{    public static function view($app_name,$Param=array())    {        $app = new App($app_name);        $view = $app->view($Param);        return $view;    }    public static function obj($app_name,$Param=array())    {        $app = new App;        return $app;    }}class Tool extends App{    public $appdir = 'app/mod';}class Tool_S{    public static function view($app_name,$Param=array())    {        $app = new Tool($app_name);        $view = $app->view($Param);        return $view;    }}class AppTool extends App{    public $appdir = '';}class AppTool_S{    public static function general($tool_name,$Param=array())    {        $mod = new AppTool;        $view = $mod->view($tool_name,$Param);        return $view;    }}*/